class Solution:
    def union(self, node1, node2, rank, parents):
        firstParent = self.find(node1, parents)
        secondParent = self.find(node2, parents)

        if firstParent != secondParent:
            rank1 = rank[firstParent]
            rank2 = rank[secondParent]

            if rank1 > rank2:
                parents[secondParent] = firstParent
                rank[firstParent] += rank2
            else: 
                parents[firstParent] = secondParent
                rank[secondParent] += rank1
            
    def find(self, node, parents):
        if parents[node] == node:
            return node

        parents[node] = self.find(parents[node], parents)
        return parents[node]
            
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        parents = {}
        rank = [1] * len(graph)
        infectedParents = defaultdict(int)
        
        for i in range(len(graph)):
            parents[i] = i
        
        for i in range(len(graph)):
            for j in range(len(graph[0])):
                if graph[i][j] == 1 and i != j:
                    self.union(i, j, rank, parents)
            
        for node in range(len(graph)):
            self.find(node, parents)
                    
        for i in initial:
            parent = self.find(i, parents)
            if parent in infectedParents:
                infectedParents[parent] = -1
            else:
                infectedParents[parent] = 0
        
        node = -1
        maxSpread = 0
        initial.sort()
        
        for i in initial:
            parent = self.find(i, parents)
            if infectedParents[parent] != -1:
                if node == -1:
                    node = i
                    maxSpread = rank[parent]
                    
                if maxSpread < rank[parent]:
                    node = i
                    maxSpread = rank[parent]
            
        return node if node != -1 else initial[0]